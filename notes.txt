NaN = Not a number and is a falsy value
[] = truey
{} = truey
null = falsey

if both o and a are empty objects it will evaluate as follows
o === a is falsey

if you set o equal to above
it will evaluate to truey
cause o and a are now pointing to same location


if you want to use an array in an if statement you evaluate the length size.
Otherwise it evaluates to a true statement.

Arrays and classes are objects

let array = new Array();
or let array = [];
initializes an array;

array = new Array(8).fill('love');
array = new Array(8).fill({name: 'john', age: '30'});

array[0] = {name: 'Pepito', age: '20'} //will change one value

let 0 = {name: 'pepe', age: 20}; array = new Array(8).fill(o); //will change all values

const o = {name: 'Fifi'}

o.name = 'alberto'

o['age'] = 20; //adds a new key value apir to a constant variable pointing to an object;

o.age = 20; //same as above, but using dot notation

delete o.name //deletes 

to find the keys in an object use
Object.keys

to check if an object is not empty
Object.keys(0).length;

typeof {} === typeof []
truey

!(a && b) === !a || !b
!(a || b) === !a && !b

//corollaries:
!(a && b && c && d) === !a || !b || !c || !d
!(a || b || c || d) === !a && !b && !c && !d

a           b          !(a && b)        !a || !b



!(a > b)   ===   (a <= b)
n > 8             n <= 8
n >= 2            n < 2
------------------------------

Object.keys(0) ///returns array of all the keys
Object.keys(0).length //zero means it's empty

let a = [{name: "bob"}, {name: 'pepe'}, {name: 'juan'}, {name: 'Alberto'}];
let p = [{name: "a"}, {name: 'b'}, {name: 'c'}, {name: 'd'}];


//forEach is a method used with arrays
a.forEach()
or
a.find( e => e.name === 'pepe'); //find is a call back function

to look for object with a letter a // find will stop when it finds the first one
a.find( e => { for(var key in e) return (e[key]).match(/a/gi)});

//filter finds all occurences
a.filter(e => {
for (var key in e)
{
        return (e[key]).match(/a/gi);
}})


note: to find values type a and hit enter
this will show all methods used with arrays

note: concat does not change original arrays. Must assign result to a new variable.

a.concat(p);

a.concat(p, [{age:23}])

//go to regex101 to test


map always returns an array , the same length as the original, if something is skipped it will return as undefines


reduce is a function that takes a call back function as a parameter and this function takes an accumulator and an element
it returns the value of the accumulator to be used in the function



arr.reduce(function(a, e){

e = {name: 'lola'}

return a[e.name]

},{});


to get a number between 20 and 100
Math.ceil(Math.random() * 100)

//boolean result - checks array looking for some requirement and then stops
arr.some( (e, i, arr) => )














